template <encrypto::motion::MpcProtocol Protocol>
std::vector<encrypto::motion::SecureUnsignedInteger> cryptonets_max_pooling(
    encrypto::motion::PartyPointer &party,
    std::vector<encrypto::motion::SecureUnsignedInteger> vals_0,
    std::uint32_t _MPC_PLAINTEXT_cols_0,
    std::uint32_t _MPC_PLAINTEXT_rows_0,
    std::vector<encrypto::motion::SecureUnsignedInteger> OUTPUT_res_0
) {
    // Shared variable declarations
    std::vector<encrypto::motion::ShareWrapper> _1_3((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> _10_0((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> _11_0((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> _12_0((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::ShareWrapper> _2_3((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::ShareWrapper> _3_3((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> _4_0((_MPC_PLAINTEXT_rows_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> _5_0((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> _6_0((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> _7_0((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> _8_0((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> _9_0((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> OUTPUT_res_3((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    encrypto::motion::SecureUnsignedInteger cols_0;
    encrypto::motion::SecureUnsignedInteger cols_res_1;
    std::vector<encrypto::motion::SecureUnsignedInteger> max_3((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> max_4((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> max_5((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> max_6((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> max_7((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> max_8((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    std::vector<encrypto::motion::SecureUnsignedInteger> max_9((_MPC_PLAINTEXT_rows_res_1) * (_MPC_PLAINTEXT_cols_res_1));
    encrypto::motion::SecureUnsignedInteger rows_0;
    encrypto::motion::SecureUnsignedInteger rows_res_1;

    // Plaintext variable declarations
    std::uint32_t _MPC_PLAINTEXT_cols_res_1;
    std::uint32_t _MPC_PLAINTEXT_rows_res_1;

    // Constant initializations
    encrypto::motion::SecureUnsignedInteger _MPC_CONSTANT_2 = party->In<Protocol>(encrypto::motion::ToInput(std::uint32_t(2)), 0);

    // Plaintext parameter assignments
    cols_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_cols_0), 0);
    rows_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_rows_0), 0);

    // Function body
    rows_res_1 = (rows_0 / _MPC_CONSTANT_2);
    _MPC_PLAINTEXT_rows_res_1 = (_MPC_PLAINTEXT_rows_0 / std::uint32_t(2));
    cols_res_1 = (cols_0 / _MPC_CONSTANT_2);
    _MPC_PLAINTEXT_cols_res_1 = (_MPC_PLAINTEXT_cols_0 / std::uint32_t(2));
    vectorized_assign(_4_0, {_MPC_PLAINTEXT_rows_res_1}, {true}, {}, lift(std::function([&](const std::vector<std::uint32_t> &indices){return OUTPUT_res_0;}), {_MPC_PLAINTEXT_rows_res_1}));
    vectorized_assign(_6_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, lift(std::function([&](const std::vector<std::uint32_t> &indices){return vals_0[(((indices[0] * std::uint32_t(2)) * _MPC_PLAINTEXT_cols_0) + (indices[1] * std::uint32_t(2)))];}), {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}));
    vectorized_assign(_7_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, lift(std::function([&](const std::vector<std::uint32_t> &indices){return vals_0[((((indices[0] * std::uint32_t(2)) * _MPC_PLAINTEXT_cols_0) + (indices[1] * std::uint32_t(2))) + std::uint32_t(1))];}), {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}));
    vectorized_assign(_8_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, lift(std::function([&](const std::vector<std::uint32_t> &indices){return vals_0[((((indices[0] * std::uint32_t(2)) * _MPC_PLAINTEXT_cols_0) + (indices[1] * std::uint32_t(2))) + std::uint32_t(1))];}), {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}));
    vectorized_assign(_9_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, lift(std::function([&](const std::vector<std::uint32_t> &indices){return vals_0[((((indices[0] * std::uint32_t(2)) + std::uint32_t(1)) * _MPC_PLAINTEXT_cols_0) + (indices[1] * std::uint32_t(2)))];}), {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}));
    vectorized_assign(_10_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, lift(std::function([&](const std::vector<std::uint32_t> &indices){return vals_0[((((indices[0] * std::uint32_t(2)) + std::uint32_t(1)) * _MPC_PLAINTEXT_cols_0) + (indices[1] * std::uint32_t(2)))];}), {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}));
    vectorized_assign(_11_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, lift(std::function([&](const std::vector<std::uint32_t> &indices){return vals_0[(((((indices[0] * std::uint32_t(2)) + std::uint32_t(1)) * _MPC_PLAINTEXT_cols_0) + (indices[1] * std::uint32_t(2))) + std::uint32_t(1))];}), {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}));
    vectorized_assign(_12_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, lift(std::function([&](const std::vector<std::uint32_t> &indices){return vals_0[(((((indices[0] * std::uint32_t(2)) + std::uint32_t(1)) * _MPC_PLAINTEXT_cols_0) + (indices[1] * std::uint32_t(2))) + std::uint32_t(1))];}), {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}));
    vectorized_assign(max_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, vectorized_access(_6_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}));
    vectorized_assign(_1_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, (vectorized_access(_7_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}) > vectorized_access(max_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {})));
    vectorized_assign(max_4, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, vectorized_access(_8_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}));
    vectorized_assign(max_5, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, vectorized_access(_1_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}).Mux(vectorized_access(max_4, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}).Get(), vectorized_access(max_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}).Get()));
    vectorized_assign(_2_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, (vectorized_access(_9_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}) > vectorized_access(max_5, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {})));
    vectorized_assign(max_6, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, vectorized_access(_10_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}));
    vectorized_assign(max_7, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, vectorized_access(_2_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}).Mux(vectorized_access(max_6, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}).Get(), vectorized_access(max_5, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}).Get()));
    vectorized_assign(_3_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, (vectorized_access(_11_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}) > vectorized_access(max_7, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {})));
    vectorized_assign(max_8, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, vectorized_access(_12_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}));
    vectorized_assign(max_9, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, vectorized_access(_3_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}).Mux(vectorized_access(max_8, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}).Get(), vectorized_access(max_7, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}).Get()));
    vectorized_assign(_5_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, lift(std::function([&](const std::vector<std::uint32_t> &indices){return _4_0;}), {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}));
    vectorized_assign(OUTPUT_res_3, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, vectorized_update(vectorized_access(_5_0, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}), {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {}, vectorized_access(max_9, {_MPC_PLAINTEXT_rows_res_1, _MPC_PLAINTEXT_cols_res_1}, {true, true}, {})));
    return OUTPUT_res_3;

}
