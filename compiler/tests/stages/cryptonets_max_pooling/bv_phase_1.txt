def cryptonets_max_pooling(vals!0: shared[list[int; ?]], cols!0: plaintext[int], rows!0: plaintext[int], OUTPUT_res!0: shared[list[int; ?]]) -> shared[list[int; ?]]:
    rows_res!1 = (rows!0 / 2)
    cols_res!1 = (cols!0 / 2)
    !4!0{ROWS_RES!1}[] = lift(OUTPUT_res!0, (i!1:rows_res!1))
    for i!1 in range(0, rows_res!1):
        OUTPUT_res!1{ROWS_RES!1, COLS_RES!1}[] = Φ(!4!0{ROWS_RES!1}[], OUTPUT_res!2{ROWS_RES!1, COLS_RES!1}[]) (targetless)
        !5!0{ROWS_RES!1, COLS_RES!1}[] = lift(OUTPUT_res!1{ROWS_RES!1, COLS_RES!1}[], (i!1:rows_res!1, j!1:cols_res!1))
        !6!0{ROWS_RES!1, COLS_RES!1}[] = lift(vals!0[(((i!1 * 2) * cols!0) + (j!1 * 2))], (i!1:rows_res!1, j!1:cols_res!1))
        !7!0{ROWS_RES!1, COLS_RES!1}[] = lift(vals!0[((((i!1 * 2) * cols!0) + (j!1 * 2)) + 1)], (i!1:rows_res!1, j!1:cols_res!1))
        !8!0{ROWS_RES!1, COLS_RES!1}[] = lift(vals!0[((((i!1 * 2) * cols!0) + (j!1 * 2)) + 1)], (i!1:rows_res!1, j!1:cols_res!1))
        !9!0{ROWS_RES!1, COLS_RES!1}[] = lift(vals!0[((((i!1 * 2) + 1) * cols!0) + (j!1 * 2))], (i!1:rows_res!1, j!1:cols_res!1))
        !10!0{ROWS_RES!1, COLS_RES!1}[] = lift(vals!0[((((i!1 * 2) + 1) * cols!0) + (j!1 * 2))], (i!1:rows_res!1, j!1:cols_res!1))
        !11!0{ROWS_RES!1, COLS_RES!1}[] = lift(vals!0[(((((i!1 * 2) + 1) * cols!0) + (j!1 * 2)) + 1)], (i!1:rows_res!1, j!1:cols_res!1))
        !12!0{ROWS_RES!1, COLS_RES!1}[] = lift(vals!0[(((((i!1 * 2) + 1) * cols!0) + (j!1 * 2)) + 1)], (i!1:rows_res!1, j!1:cols_res!1))
        for j!1 in range(0, cols_res!1):
            OUTPUT_res!2{ROWS_RES!1, COLS_RES!1}[] = Φ(!5!0{ROWS_RES!1, COLS_RES!1}[], OUTPUT_res!3{ROWS_RES!1, COLS_RES!1}[]) (targetless)
            max!3{ROWS_RES!1, COLS_RES!1}[] = !6!0{ROWS_RES!1, COLS_RES!1}[]
            !1!3{ROWS_RES!1, COLS_RES!1}[] = (!7!0{ROWS_RES!1, COLS_RES!1}[] > max!3{ROWS_RES!1, COLS_RES!1}[])
            max!4{ROWS_RES!1, COLS_RES!1}[] = !8!0{ROWS_RES!1, COLS_RES!1}[]
            max!5{ROWS_RES!1, COLS_RES!1}[] = MUX(!1!3{ROWS_RES!1, COLS_RES!1}[], max!4{ROWS_RES!1, COLS_RES!1}[], max!3{ROWS_RES!1, COLS_RES!1}[])
            !2!3{ROWS_RES!1, COLS_RES!1}[] = (!9!0{ROWS_RES!1, COLS_RES!1}[] > max!5{ROWS_RES!1, COLS_RES!1}[])
            max!6{ROWS_RES!1, COLS_RES!1}[] = !10!0{ROWS_RES!1, COLS_RES!1}[]
            max!7{ROWS_RES!1, COLS_RES!1}[] = MUX(!2!3{ROWS_RES!1, COLS_RES!1}[], max!6{ROWS_RES!1, COLS_RES!1}[], max!5{ROWS_RES!1, COLS_RES!1}[])
            !3!3{ROWS_RES!1, COLS_RES!1}[] = (!11!0{ROWS_RES!1, COLS_RES!1}[] > max!7{ROWS_RES!1, COLS_RES!1}[])
            max!8{ROWS_RES!1, COLS_RES!1}[] = !12!0{ROWS_RES!1, COLS_RES!1}[]
            max!9{ROWS_RES!1, COLS_RES!1}[] = MUX(!3!3{ROWS_RES!1, COLS_RES!1}[], max!8{ROWS_RES!1, COLS_RES!1}[], max!7{ROWS_RES!1, COLS_RES!1}[])
            OUTPUT_res!3{ROWS_RES!1, COLS_RES!1}[] = VectorizedUpdate(OUTPUT_res!2{ROWS_RES!1, COLS_RES!1}[], [I!1, J!1], max!9{ROWS_RES!1, COLS_RES!1}[])
    return OUTPUT_res!1
