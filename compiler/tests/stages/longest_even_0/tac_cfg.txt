Function longest_even_0(Seq: shared[list[int]], N: plaintext[int], Sym: shared[int]) -> shared[int]:
Entry block: 0
Exit block: 3
Block 0:
    current_length = 0
    max_length = 0
    jump
Block 1:
    for i: plaintext[int] in range(1, N)
Block 2:
    !1 = (Seq[i] == Sym)
    conditional jump !1
Block 3:
    return max_length
Block 4:
    current_length = (current_length + 1)
    jump
Block 5:
    current_length = 0
    jump
Block 6:
    (merge from conditional jump !1)
    tmp_max_len = max_length
    !2 = (current_length > max_length)
    conditional jump !2
Block 7:
    tmp_max_len = current_length
    jump
Block 8:
    jump
Block 9:
    (merge from conditional jump !2)
    !3 = (tmp_max_len % 2)
    !4 = (!3 == 0)
    conditional jump !4
Block 10:
    max_length = tmp_max_len
    jump
Block 11:
    jump
Block 12:
    (merge from conditional jump !4)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 5, F) (2, 4, T) (4, 6, *) (5, 6, *) (6, 8, F) (6, 7, T) (7, 9, *) (8, 9, *) (9, 11, F) (9, 10, T) (10, 12, *) (11, 12, *) (12, 1, *)
