Nodes:
    hull_X₁ = []
    hull_Y₁ = []
    hull_X₂ = Φ(hull_X₁, hull_X₄)
    hull_Y₂ = Φ(hull_Y₁, hull_Y₄)
    is_hull₂ = True
    p1_X₂ = X_coords₀[i]
    p1_Y₂ = Y_coords₀[i]
    !1₂ = (p1_X₂ <= 0)
    !2₂ = (p1_Y₂ >= 0)
    !3₂ = (!1₂ and !2₂)
    is_hull₃ = Φ(is_hull₂, is_hull₅)
    p2_X₃ = X_coords₀[j]
    p2_Y₃ = Y_coords₀[j]
    !6₃ = (p1_X₂ <= p2_X₃)
    !7₃ = (p1_Y₂ >= p2_Y₃)
    !8₃ = (!6₃ or !7₃)
    !9₃ = not !8₃
    is_hull₄ = False
    is_hull₅ = MUX(!9₃, is_hull₄, is_hull₃)
    is_hull₆ = MUX(!3₂, is_hull₂, is_hull₃)
    !10₂ = [p1_X₂]
    hull_X₃ = (hull_X₂ + !10₂)
    !11₂ = [p1_Y₂]
    hull_Y₃ = (hull_Y₂ + !11₂)
    hull_X₄ = MUX(is_hull₆, hull_X₃, hull_X₂)
    hull_Y₄ = MUX(is_hull₆, hull_Y₃, hull_Y₂)
    !12₁ = (hull_X₂, hull_Y₂)
Forward edges:
    hull_X₁ = []  →  hull_X₂ = Φ(hull_X₁, hull_X₄)
    hull_Y₁ = []  →  hull_Y₂ = Φ(hull_Y₁, hull_Y₄)
    hull_X₂ = Φ(hull_X₁, hull_X₄)  →  hull_X₃ = (hull_X₂ + !10₂)
    hull_X₂ = Φ(hull_X₁, hull_X₄)  →  hull_X₄ = MUX(is_hull₆, hull_X₃, hull_X₂)
    hull_X₂ = Φ(hull_X₁, hull_X₄)  →  !12₁ = (hull_X₂, hull_Y₂)
    hull_Y₂ = Φ(hull_Y₁, hull_Y₄)  →  hull_Y₃ = (hull_Y₂ + !11₂)
    hull_Y₂ = Φ(hull_Y₁, hull_Y₄)  →  hull_Y₄ = MUX(is_hull₆, hull_Y₃, hull_Y₂)
    hull_Y₂ = Φ(hull_Y₁, hull_Y₄)  →  !12₁ = (hull_X₂, hull_Y₂)
    is_hull₂ = True  →  is_hull₃ = Φ(is_hull₂, is_hull₅)
    is_hull₂ = True  →  is_hull₆ = MUX(!3₂, is_hull₂, is_hull₃)
    p1_X₂ = X_coords₀[i]  →  !1₂ = (p1_X₂ <= 0)
    p1_X₂ = X_coords₀[i]  →  !6₃ = (p1_X₂ <= p2_X₃)
    p1_X₂ = X_coords₀[i]  →  !10₂ = [p1_X₂]
    p1_Y₂ = Y_coords₀[i]  →  !2₂ = (p1_Y₂ >= 0)
    p1_Y₂ = Y_coords₀[i]  →  !7₃ = (p1_Y₂ >= p2_Y₃)
    p1_Y₂ = Y_coords₀[i]  →  !11₂ = [p1_Y₂]
    !1₂ = (p1_X₂ <= 0)  →  !3₂ = (!1₂ and !2₂)
    !2₂ = (p1_Y₂ >= 0)  →  !3₂ = (!1₂ and !2₂)
    !3₂ = (!1₂ and !2₂)  →  is_hull₆ = MUX(!3₂, is_hull₂, is_hull₃)
    is_hull₃ = Φ(is_hull₂, is_hull₅)  →  is_hull₅ = MUX(!9₃, is_hull₄, is_hull₃)
    is_hull₃ = Φ(is_hull₂, is_hull₅)  →  is_hull₆ = MUX(!3₂, is_hull₂, is_hull₃)
    p2_X₃ = X_coords₀[j]  →  !6₃ = (p1_X₂ <= p2_X₃)
    p2_Y₃ = Y_coords₀[j]  →  !7₃ = (p1_Y₂ >= p2_Y₃)
    !6₃ = (p1_X₂ <= p2_X₃)  →  !8₃ = (!6₃ or !7₃)
    !7₃ = (p1_Y₂ >= p2_Y₃)  →  !8₃ = (!6₃ or !7₃)
    !8₃ = (!6₃ or !7₃)  →  !9₃ = not !8₃
    !9₃ = not !8₃  →  is_hull₅ = MUX(!9₃, is_hull₄, is_hull₃)
    is_hull₄ = False  →  is_hull₅ = MUX(!9₃, is_hull₄, is_hull₃)
    is_hull₆ = MUX(!3₂, is_hull₂, is_hull₃)  →  hull_X₄ = MUX(is_hull₆, hull_X₃, hull_X₂)
    is_hull₆ = MUX(!3₂, is_hull₂, is_hull₃)  →  hull_Y₄ = MUX(is_hull₆, hull_Y₃, hull_Y₂)
    !10₂ = [p1_X₂]  →  hull_X₃ = (hull_X₂ + !10₂)
    hull_X₃ = (hull_X₂ + !10₂)  →  hull_X₄ = MUX(is_hull₆, hull_X₃, hull_X₂)
    !11₂ = [p1_Y₂]  →  hull_Y₃ = (hull_Y₂ + !11₂)
    hull_Y₃ = (hull_Y₂ + !11₂)  →  hull_Y₄ = MUX(is_hull₆, hull_Y₃, hull_Y₂)
Back edges:
    is_hull₅ = MUX(!9₃, is_hull₄, is_hull₃)  →  is_hull₃ = Φ(is_hull₂, is_hull₅)
    hull_X₄ = MUX(is_hull₆, hull_X₃, hull_X₂)  →  hull_X₂ = Φ(hull_X₁, hull_X₄)
    hull_Y₄ = MUX(is_hull₆, hull_Y₃, hull_Y₂)  →  hull_Y₂ = Φ(hull_Y₁, hull_Y₄)
