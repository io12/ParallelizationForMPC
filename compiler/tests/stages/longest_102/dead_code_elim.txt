Function longest_102(Seq: shared[list[int]], N: plaintext[int], Syms: shared[list[int]]):
Entry block: 0
Exit block: 3
Block 0:
    s0!1 = False
    max_len!1 = 0
    length!1 = 0
    jump
Block 1:
    s0!2 = Φ(s0!1, s0!3)
    max_len!2 = Φ(max_len!1, max_len!4)
    length!2 = Φ(length!1, length!5)
    for i: plaintext[int] in range(0, N!0)
Block 2:
    !1!2 = (Seq!0[i] == Syms!0[2])
    s1!2 = (s0!2 and !1!2)
    !2!2 = (Seq!0[i] == Syms!0[1])
    !4!2 = (Seq!0[i] == Syms!0[0])
    !5!2 = (s0!2 and !4!2)
    s0!3 = (!2!2 or !5!2)
    !6!2 = (s1!2 or s0!3)
    conditional jump !6!2
Block 3:
    return max_len!2
Block 4:
    length!3 = (length!2 + 1)
    jump
Block 5:
    length!4 = 0
    jump
Block 6:
    (merge from conditional jump !6!2)
    length!5 = MUX(!6!2, length!3, length!4)
    !7!2 = (max_len!2 < length!5)
    !8!2 = (s1!2 and !7!2)
    conditional jump !8!2
Block 7:
    max_len!3 = length!5
    jump
Block 8:
    jump
Block 9:
    (merge from conditional jump !8!2)
    max_len!4 = MUX(!8!2, max_len!3, max_len!2)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 5, F) (2, 4, T) (4, 6, *) (5, 6, *) (6, 8, F) (6, 7, T) (7, 9, *) (8, 9, *) (9, 1, *)
