template <encrypto::motion::MpcProtocol Protocol>
std::tuple<encrypto::motion::SecureUnsignedInteger, encrypto::motion::SecureUnsignedInteger> biometric(
    encrypto::motion::PartyPointer &party,
    std::vector<encrypto::motion::SecureUnsignedInteger> C_0,
    std::uint32_t _MPC_PLAINTEXT_D_0,
    std::vector<encrypto::motion::SecureUnsignedInteger> S_0,
    std::uint32_t _MPC_PLAINTEXT_N_0
) {
    // Shared variable declarations
    encrypto::motion::ShareWrapper _1_2;
    std::tuple<encrypto::motion::SecureUnsignedInteger, encrypto::motion::SecureUnsignedInteger> _2_1;
    encrypto::motion::SecureUnsignedInteger D_0;
    encrypto::motion::SecureUnsignedInteger N_0;
    encrypto::motion::SecureUnsignedInteger d_3;
    encrypto::motion::SecureUnsignedInteger i_1;
    encrypto::motion::SecureUnsignedInteger j_1;
    encrypto::motion::SecureUnsignedInteger min_index_1;
    encrypto::motion::SecureUnsignedInteger min_index_2;
    encrypto::motion::SecureUnsignedInteger min_index_3;
    encrypto::motion::SecureUnsignedInteger min_index_4;
    encrypto::motion::SecureUnsignedInteger min_sum_1;
    encrypto::motion::SecureUnsignedInteger min_sum_2;
    encrypto::motion::SecureUnsignedInteger min_sum_3;
    encrypto::motion::SecureUnsignedInteger min_sum_4;
    encrypto::motion::SecureUnsignedInteger p_3;
    encrypto::motion::SecureUnsignedInteger sum_2;
    encrypto::motion::SecureUnsignedInteger sum_3;
    encrypto::motion::SecureUnsignedInteger sum_4;

    // Plaintext variable declarations
    std::tuple<std::uint32_t, std::uint32_t> _MPC_PLAINTEXT__2_1;
    std::uint32_t _MPC_PLAINTEXT_i_1;
    std::uint32_t _MPC_PLAINTEXT_j_1;
    std::uint32_t _MPC_PLAINTEXT_min_index_1;
    std::uint32_t _MPC_PLAINTEXT_min_index_3;
    std::uint32_t _MPC_PLAINTEXT_min_sum_1;
    std::uint32_t _MPC_PLAINTEXT_sum_2;

    // Constant initializations
    encrypto::motion::SecureUnsignedInteger _MPC_CONSTANT_0 = party->In<Protocol>(encrypto::motion::ToInput(std::uint32_t(0)), 0);
    encrypto::motion::SecureUnsignedInteger _MPC_CONSTANT_10000 = party->In<Protocol>(encrypto::motion::ToInput(std::uint32_t(10000)), 0);

    // Plaintext parameter assignments
    D_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_D_0), 0);

    N_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_N_0), 0);

    // Function body
    min_sum_1 = _MPC_CONSTANT_10000;
    _MPC_PLAINTEXT_min_sum_1 = std::uint32_t(10000);
    min_index_1 = _MPC_CONSTANT_0;
    _MPC_PLAINTEXT_min_index_1 = std::uint32_t(0);

    // Initialize phi values
    min_sum_2 = min_sum_1;
    min_index_2 = min_index_1;
    for (_MPC_PLAINTEXT_i_1 = std::uint32_t(0); _MPC_PLAINTEXT_i_1 < _MPC_PLAINTEXT_N_0; _MPC_PLAINTEXT_i_1++) {
        i_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_i_1), 0);
        sum_2 = _MPC_CONSTANT_0;
        _MPC_PLAINTEXT_sum_2 = std::uint32_t(0);

        // Initialize phi values
        sum_3 = sum_2;
        for (_MPC_PLAINTEXT_j_1 = std::uint32_t(0); _MPC_PLAINTEXT_j_1 < _MPC_PLAINTEXT_D_0; _MPC_PLAINTEXT_j_1++) {
            j_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_j_1), 0);
            d_3 = (S_0[((_MPC_PLAINTEXT_i_1 * _MPC_PLAINTEXT_D_0) + _MPC_PLAINTEXT_j_1)] - C_0[_MPC_PLAINTEXT_j_1]);
            p_3 = (d_3 * d_3);
            sum_4 = (sum_3 + p_3);

            // Update phi values
            sum_3 = sum_4;
        }

        _1_2 = (min_sum_2 > sum_3);
        min_sum_3 = sum_3;
        min_index_3 = i_1;
        _MPC_PLAINTEXT_min_index_3 = _MPC_PLAINTEXT_i_1;
        min_sum_4 = _1_2.Mux(min_sum_3.Get(), min_sum_2.Get());
        min_index_4 = _1_2.Mux(min_index_3.Get(), min_index_2.Get());

        // Update phi values
        min_sum_2 = min_sum_4;
        min_index_2 = min_index_4;
    }

    _2_1 = std::make_tuple(min_sum_2, min_index_2);

    return _2_1;
}
