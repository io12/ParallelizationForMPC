Nodes:
    min_sum₁ = 10000
    min_index₁ = - 1
    min_sum₂ = Φ(min_sum₁, min_sum₄)
    min_index₂ = Φ(min_index₁, min_index₄)
    sum₂ = 0
    sum₃ = Φ(sum₂, sum₄)
    d₃ = (S₀[((i * D₀) + j)] - C₀[j])
    p₃ = (d₃ * d₃)
    sum₄ = (sum₃ + p₃)
    !1₂ = (sum₃ < min_sum₂)
    min_sum₃ = sum₃
    min_index₃ = i
    min_sum₄ = MUX(!1₂, min_sum₃, min_sum₂)
    min_index₄ = MUX(!1₂, min_index₃, min_index₂)
    !2₁ = (min_sum₂, min_index₂)
Forward edges:
    min_sum₁ = 10000  →  min_sum₂ = Φ(min_sum₁, min_sum₄)
    min_index₁ = - 1  →  min_index₂ = Φ(min_index₁, min_index₄)
    min_sum₂ = Φ(min_sum₁, min_sum₄)  →  !1₂ = (sum₃ < min_sum₂)
    min_sum₂ = Φ(min_sum₁, min_sum₄)  →  min_sum₄ = MUX(!1₂, min_sum₃, min_sum₂)
    min_sum₂ = Φ(min_sum₁, min_sum₄)  →  !2₁ = (min_sum₂, min_index₂)
    min_index₂ = Φ(min_index₁, min_index₄)  →  min_index₄ = MUX(!1₂, min_index₃, min_index₂)
    min_index₂ = Φ(min_index₁, min_index₄)  →  !2₁ = (min_sum₂, min_index₂)
    sum₂ = 0  →  sum₃ = Φ(sum₂, sum₄)
    sum₃ = Φ(sum₂, sum₄)  →  sum₄ = (sum₃ + p₃)
    sum₃ = Φ(sum₂, sum₄)  →  !1₂ = (sum₃ < min_sum₂)
    sum₃ = Φ(sum₂, sum₄)  →  min_sum₃ = sum₃
    d₃ = (S₀[((i * D₀) + j)] - C₀[j])  →  p₃ = (d₃ * d₃)
    p₃ = (d₃ * d₃)  →  sum₄ = (sum₃ + p₃)
    !1₂ = (sum₃ < min_sum₂)  →  min_sum₄ = MUX(!1₂, min_sum₃, min_sum₂)
    !1₂ = (sum₃ < min_sum₂)  →  min_index₄ = MUX(!1₂, min_index₃, min_index₂)
    min_sum₃ = sum₃  →  min_sum₄ = MUX(!1₂, min_sum₃, min_sum₂)
    min_index₃ = i  →  min_index₄ = MUX(!1₂, min_index₃, min_index₂)
Back edges:
    sum₄ = (sum₃ + p₃)  →  sum₃ = Φ(sum₂, sum₄)
    min_sum₄ = MUX(!1₂, min_sum₃, min_sum₂)  →  min_sum₂ = Φ(min_sum₁, min_sum₄)
    min_index₄ = MUX(!1₂, min_index₃, min_index₂)  →  min_index₂ = Φ(min_index₁, min_index₄)
