Function(C, D, S, N):
Entry block: 0
Exit block: 3
Block 0:
    min_sum!1 = 10000
    min_index!1 = - 1
    jump
Block 1:
    min_sum!2 = Φ(min_sum!1, min_sum!4)
    min_index!2 = Φ(min_index!1, min_index!4)
    sum!1 = Φ(sum!0, sum!3)
    !1!1 = Φ(!1!0, !1!2)
    !2!1 = Φ(!2!0, !2!2)
    d!1 = Φ(d!0, d!2)
    p!1 = Φ(p!0, p!2)
    !3!1 = Φ(!3!0, !3!2)
    for i in range(0, N!0)
Block 2:
    sum!2 = 0
    jump
Block 3:
    !4!1 = (min_sum!2, min_index!2)
    return !4!1
Block 4:
    sum!3 = Φ(sum!2, sum!4)
    !1!2 = Φ(!1!1, !1!3)
    !2!2 = Φ(!2!1, !2!3)
    d!2 = Φ(d!1, d!3)
    p!2 = Φ(p!1, p!3)
    for j in range(0, D!0)
Block 5:
    !1!3 = S[((i * D!0) + j)]
    !2!3 = C[j]
    d!3 = (!1!3 - !2!3)
    p!3 = (d!3 * d!3)
    sum!4 = (sum!3 + p!3)
    jump
Block 6:
    !3!2 = (sum!3 < min_sum!2)
    conditional jump !3!2
Block 7:
    min_sum!3 = sum!3
    min_index!3 = i
    jump
Block 8:
    jump
Block 9:
    min_sum!4 = Φ(min_sum!3, min_sum!2)
    min_index!4 = Φ(min_index!3, min_index!2)
    (merge from conditional jump !3!2)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 4, *) (6, 8, F) (6, 7, T) (7, 9, *) (8, 9, *) (9, 1, *)
