Function longest_odd_10(Seq: shared[list[int]], N: plaintext[int], Syms: shared[list[int]]):
Entry block: 0
Exit block: 3
Block 0:
    current_length₁ = 0
    max_length₁ = 0
    s2₁ = False
    jump
Block 1:
    current_length₂ = Φ(current_length₁, current_length₆)
    max_length₂ = Φ(max_length₁, max_length₄)
    s2₂ = Φ(s2₁, s2₃)
    !1₁ = Φ(!1₀, !1₂)
    s1₁ = Φ(s1₀, s1₂)
    !2₁ = Φ(!2₀, !2₃)
    !3₁ = Φ(!3₀, !3₂)
    !4₁ = Φ(!4₀, !4₂)
    !5₁ = Φ(!5₀, !5₂)
    !6₁ = Φ(!6₀, !6₂)
    !7₁ = Φ(!7₀, !7₂)
    for i: plaintext[int] in range(0, N₀)
Block 2:
    !1₂ = (Seq₀[i] == Syms₀[1])
    s1₂ = (s2₂ and !1₂)
    conditional jump s1₂
Block 3:
    return max_length₂
Block 4:
    current_length₃ = (current_length₂ + 1)
    jump
Block 5:
    !2₂ = not s2₂
    conditional jump !2₂
Block 6:
    (merge from conditional jump s1₂)
    current_length₆ = MUX(s1₂, current_length₃, current_length₅)
    !2₃ = MUX(s1₂, !2₁, !2₂)
    !3₂ = (current_length₆ % 2)
    !4₂ = (current_length₆ % 2)
    !5₂ = (!4₂ == 1)
    !6₂ = (current_length₆ > max_length₂)
    !7₂ = (!5₂ and !6₂)
    conditional jump !7₂
Block 7:
    current_length₄ = 0
    jump
Block 8:
    jump
Block 9:
    (merge from conditional jump !2₂)
    current_length₅ = MUX(!2₂, current_length₄, current_length₂)
    jump
Block 10:
    max_length₃ = current_length₆
    jump
Block 11:
    jump
Block 12:
    (merge from conditional jump !7₂)
    max_length₄ = MUX(!7₂, max_length₃, max_length₂)
    s2₃ = (Seq₀[i] == Syms₀[0])
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 5, F) (2, 4, T) (4, 6, *) (5, 8, F) (5, 7, T) (6, 11, F) (6, 10, T) (7, 9, *) (8, 9, *) (9, 6, *) (10, 12, *) (11, 12, *) (12, 1, *)
