Function longest_1s(Seq: shared[list[int]], N: plaintext[int], Sym: shared[int]) -> shared[int]:
Entry block: 0
Exit block: 3
Block 0:
    max_length!1 = 0
    length!1 = 0
    jump
Block 1:
    max_length!2 = Φ(max_length!1, max_length!4)
    length!2 = Φ(length!1, length!5)
    !1!1 = Φ(!1!0, !1!2)
    !2!1 = Φ(!2!0, !2!2)
    for i: plaintext[int] in range(1, N!0)
Block 2:
    !1!2 = (Seq!0[i] == Sym!0)
    conditional jump !1!2
Block 3:
    return max_length!2
Block 4:
    length!3 = (length!2 + 1)
    jump
Block 5:
    length!4 = 0
    jump
Block 6:
    length!5 = Φ(length!3, length!4)
    (merge from conditional jump !1!2)
    !2!2 = (length!5 > max_length!2)
    conditional jump !2!2
Block 7:
    max_length!3 = length!5
    jump
Block 8:
    jump
Block 9:
    max_length!4 = Φ(max_length!3, max_length!2)
    (merge from conditional jump !2!2)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 5, F) (2, 4, T) (4, 6, *) (5, 6, *) (6, 8, F) (6, 7, T) (7, 9, *) (8, 9, *) (9, 1, *)
