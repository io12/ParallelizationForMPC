Function longest_1s(Seq: shared[list[int]], N: plaintext[int], Sym: shared[int]):
Entry block: 0
Exit block: 3
Block 0:
    max_length₁ = 0
    length₁ = 0
    jump
Block 1:
    max_length₂ = Φ(max_length₁, max_length₄)
    length₂ = Φ(length₁, length₅)
    for i: plaintext[int] in range(1, N₀)
Block 2:
    !1₂ = (Seq₀[i] == Sym₀)
    conditional jump !1₂
Block 3:
    return max_length₂
Block 4:
    length₃ = (length₂ + 1)
    jump
Block 5:
    length₄ = 0
    jump
Block 6:
    (merge from conditional jump !1₂)
    length₅ = MUX(!1₂, length₃, length₄)
    !2₂ = (length₅ > max_length₂)
    conditional jump !2₂
Block 7:
    max_length₃ = length₅
    jump
Block 8:
    jump
Block 9:
    (merge from conditional jump !2₂)
    max_length₄ = MUX(!2₂, max_length₃, max_length₂)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 5, F) (2, 4, T) (4, 6, *) (5, 6, *) (6, 8, F) (6, 7, T) (7, 9, *) (8, 9, *) (9, 1, *)
