Function minimal_points(X_coords: shared[list[std::uint32_t]], Y_coords: shared[list[std::uint32_t]], N: plaintext[std::uint32_t]):
Entry block: 0
Exit block: 3
Block 0:
    min_X = []
    min_Y = []
    jump
Block 1:
    for i: plaintext[int] in range(0, N)
Block 2:
    bx = False
    jump
Block 3:
    !13 = (min_X, min_Y)
    return !13
Block 4:
    for j: plaintext[int] in range(0, N)
Block 5:
    !1 = (X_coords[j] < X_coords[i])
    !2 = (Y_coords[j] < Y_coords[i])
    !3 = (X_coords[j] < X_coords[i])
    !4 = (Y_coords[j] < Y_coords[i])
    !5 = (!3 and !4)
    bx = (bx or !5)
    jump
Block 6:
    !6 = not bx
    conditional jump !6
Block 7:
    !7 = X_coords[i]
    !8 = X_coords[i]
    !9 = [!8]
    min_X = (min_X + !9)
    !10 = Y_coords[i]
    !11 = Y_coords[i]
    !12 = [!11]
    min_Y = (min_Y + !12)
    jump
Block 8:
    jump
Block 9:
    (merge from conditional jump !6)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 4, *) (6, 8, F) (6, 7, T) (7, 9, *) (8, 9, *) (9, 1, *)
