template <encrypto::motion::MpcProtocol Protocol>
std::vector<encrypto::motion::SecureUnsignedInteger> histogram(
    encrypto::motion::PartyPointer &party,
    std::vector<encrypto::motion::SecureUnsignedInteger> A_0,
    std::vector<encrypto::motion::SecureUnsignedInteger> B_0,
    std::uint32_t _MPC_PLAINTEXT_N_0,
    std::uint32_t _MPC_PLAINTEXT_num_bins_0
) {
    // Shared variable declarations
    std::vector<encrypto::motion::SecureUnsignedInteger> _1_2;
    encrypto::motion::ShareWrapper _2_3;
    encrypto::motion::SecureUnsignedInteger _3_3;
    encrypto::motion::SecureUnsignedInteger N_0;
    encrypto::motion::SecureUnsignedInteger i_1;
    encrypto::motion::SecureUnsignedInteger i_2;
    encrypto::motion::SecureUnsignedInteger j_1;
    encrypto::motion::SecureUnsignedInteger num_bins_0;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_1;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_2;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_3;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_4;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_5;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_6;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_7;

    // Plaintext variable declarations
    std::vector<std::uint32_t> _MPC_PLAINTEXT__1_2;
    std::uint32_t _MPC_PLAINTEXT_i_1;
    std::uint32_t _MPC_PLAINTEXT_i_2;
    std::uint32_t _MPC_PLAINTEXT_j_1;
    std::vector<std::uint32_t> _MPC_PLAINTEXT_result_1;
    std::vector<std::uint32_t> _MPC_PLAINTEXT_result_2;
    std::vector<std::uint32_t> _MPC_PLAINTEXT_result_3;

    // Constant initializations
    encrypto::motion::SecureUnsignedInteger _MPC_CONSTANT_0 = party->In<Protocol>(encrypto::motion::ToInput(std::uint32_t(0)), 0);

    // Plaintext parameter assignments
    N_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_N_0), 0);

    num_bins_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_num_bins_0), 0);

    // Function body
    result_1 = {};
    _MPC_PLAINTEXT_result_1 = {};

    // Initialize phi values
    result_2 = result_1;
    for (_MPC_PLAINTEXT_i_1 = std::uint32_t(0); _MPC_PLAINTEXT_i_1 < _MPC_PLAINTEXT_num_bins_0; _MPC_PLAINTEXT_i_1++) {
        i_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_i_1), 0);
        _1_2 = {_MPC_CONSTANT_0};
        _MPC_PLAINTEXT__1_2 = {std::uint32_t(0)};
        result_3 = (result_2 + _1_2);
        _MPC_PLAINTEXT_result_3 = (_MPC_PLAINTEXT_result_2 + _MPC_PLAINTEXT__1_2);

        // Update phi values
        result_2 = result_3;
    }


    // Initialize phi values
    result_4 = result_2;
    for (_MPC_PLAINTEXT_i_2 = std::uint32_t(0); _MPC_PLAINTEXT_i_2 < _MPC_PLAINTEXT_num_bins_0; _MPC_PLAINTEXT_i_2++) {
        i_2 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_i_2), 0);

        // Initialize phi values
        result_5 = result_4;
        for (_MPC_PLAINTEXT_j_1 = std::uint32_t(0); _MPC_PLAINTEXT_j_1 < _MPC_PLAINTEXT_N_0; _MPC_PLAINTEXT_j_1++) {
            j_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_j_1), 0);
            _2_3 = (encrypto::motion::ShareWrapper(A_0[_MPC_PLAINTEXT_j_1].Get()) == encrypto::motion::ShareWrapper(i_2.Get()));
            _3_3 = (result_5[_MPC_PLAINTEXT_i_2] + B_0[_MPC_PLAINTEXT_j_1]);
            result_6 = result_5;
            result_5[_MPC_PLAINTEXT_i_2] = _3_3;
            result_7 = _2_3.Mux(result_6.Get(), result_5.Get());

            // Update phi values
            result_5 = result_7;
        }


        // Update phi values
        result_4 = result_5;
    }


    return result_4;
}
