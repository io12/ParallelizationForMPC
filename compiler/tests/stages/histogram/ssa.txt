Function(A, B, N, num_bins):
Entry block: 0
Exit block: 6
Block 0:
    !1!1 = []
    result!1 = !1!1
    i!1 = 0
    !2!1 = num_bins!0
    jump
Block 1:
    result!2 = Φ(result!1, result!3)
    i!2 = Φ(i!1, i!3)
    !3!1 = Φ(!3!0, !3!2)
    !4!1 = Φ(!4!0, !4!2)
    !5!1 = Φ(!5!0, !5!2)
    !6!1 = Φ(!6!0, !6!2)
    !7!1 = Φ(!7!0, !7!2)
    !3!2 = i!2 < !2!1
    conditional jump !3!2
Block 2:
    !4!2 = 0
    !5!2 = [!4!2]
    !6!2 = result!2 + !5!2
    result!3 = !6!2
    !7!2 = 1
    i!3 = i!2 + !7!2
    jump
Block 3:
    i!4 = 0
    !8!1 = num_bins!0
    jump
Block 4:
    i!5 = Φ(i!4, i!6)
    !9!1 = Φ(!9!0, !9!2)
    j!1 = Φ(j!0, j!3)
    !10!1 = Φ(!10!0, !10!2)
    !11!1 = Φ(!11!0, !11!3)
    !12!1 = Φ(!12!0, !12!2)
    !13!1 = Φ(!13!0, !13!2)
    !18!1 = Φ(!18!0, !18!2)
    !14!1 = Φ(!14!0, !14!2)
    !15!1 = Φ(!15!0, !15!2)
    !16!1 = Φ(!16!0, !16!2)
    result[i] = Φ(result[i], result[i])
    !17!1 = Φ(!17!0, !17!2)
    !9!2 = i!5 < !8!1
    conditional jump !9!2
Block 5:
    j!2 = 0
    !10!2 = N!0
    jump
Block 6:
    return result!2
Block 7:
    j!3 = Φ(j!2, j!4)
    !11!2 = Φ(!11!1, !11!3)
    !12!2 = Φ(!12!1, !12!3)
    !13!2 = Φ(!13!1, !13!3)
    !14!2 = Φ(!14!1, !14!4)
    !15!2 = Φ(!15!1, !15!4)
    !16!2 = Φ(!16!1, !16!4)
    result[i] = Φ(result[i], result[i])
    !17!2 = Φ(!17!1, !17!3)
    !11!3 = j!3 < !10!2
    conditional jump !11!3
Block 8:
    !12!3 = A[j]
    !13!3 = !12!3 == i!5
    conditional jump !13!3
Block 9:
    !18!2 = 1
    i!6 = i!5 + !18!2
    jump
Block 10:
    !14!3 = result[i]
    !15!3 = B[j]
    !16!3 = !14!3 + !15!3
    result[i] = !16!3
    jump
Block 11:
    jump
Block 12:
    !14!4 = Φ(!14!3, !14!2)
    !15!4 = Φ(!15!3, !15!2)
    !16!4 = Φ(!16!3, !16!2)
    result[i] = Φ(result[i], result[i])
    (merge from conditional jump !13!3)
    !17!3 = 1
    j!4 = j!3 + !17!3
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 1, *) (3, 4, *) (4, 6, F) (4, 5, T) (5, 7, *) (7, 9, F) (7, 8, T) (8, 11, F) (8, 10, T) (9, 4, *) (10, 12, *) (11, 12, *) (12, 7, *)
