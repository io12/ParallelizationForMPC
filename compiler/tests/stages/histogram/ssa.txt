Function(A, B, N, num_bins):
Entry block: 0
Exit block: 6
Block 0:
    !1!1 = []
    result!1 = !1!1
    jump
Block 1:
    result!2 = Φ(result!1, result!3)
    !2!1 = Φ(!2!0, !2!2)
    !3!1 = Φ(!3!0, !3!2)
    !4!1 = Φ(!4!0, !4!2)
    for i in range(0, num_bins!0)
Block 2:
    !2!2 = 0
    !3!2 = [!2!2]
    !4!2 = result!2 + !3!2
    result!3 = !4!2
    jump
Block 3:
    jump
Block 4:
    !5!1 = Φ(!5!0, !5!2)
    !6!1 = Φ(!6!0, !6!2)
    !7!1 = Φ(!7!0, !7!2)
    !8!1 = Φ(!8!0, !8!2)
    !9!1 = Φ(!9!0, !9!2)
    result[i] = Φ(result[i], result[i])
    for i in range(0, num_bins!0)
Block 5:
    jump
Block 6:
    return result!2
Block 7:
    !5!2 = Φ(!5!1, !5!3)
    !6!2 = Φ(!6!1, !6!3)
    !7!2 = Φ(!7!1, !7!4)
    !8!2 = Φ(!8!1, !8!4)
    !9!2 = Φ(!9!1, !9!4)
    result[i] = Φ(result[i], result[i])
    for j in range(0, N!0)
Block 8:
    !5!3 = A[j]
    !6!3 = !5!3 == i
    conditional jump !6!3
Block 9:
    jump
Block 10:
    !7!3 = result[i]
    !8!3 = B[j]
    !9!3 = !7!3 + !8!3
    result[i] = !9!3
    jump
Block 11:
    jump
Block 12:
    !7!4 = Φ(!7!3, !7!2)
    !8!4 = Φ(!8!3, !8!2)
    !9!4 = Φ(!9!3, !9!2)
    result[i] = Φ(result[i], result[i])
    (merge from conditional jump !6!3)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 1, *) (3, 4, *) (4, 6, F) (4, 5, T) (5, 7, *) (7, 9, F) (7, 8, T) (8, 11, F) (8, 10, T) (9, 4, *) (10, 12, *) (11, 12, *) (12, 7, *)
