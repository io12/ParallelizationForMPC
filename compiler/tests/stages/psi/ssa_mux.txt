Function(A, SA, B, SB):
Entry block: 0
Exit block: 3
Block 0:
    result!1 = []
    jump
Block 1:
    result!2 = Φ(result!1, result!3)
    !1!1 = Φ(!1!0, !1!2)
    !2!1 = Φ(!2!0, !2!2)
    !3!1 = Φ(!3!0, !3!2)
    !4!1 = Φ(!4!0, !4!2)
    for i in range(0, SA!0)
Block 2:
    jump
Block 3:
    return result!2
Block 4:
    result!3 = Φ(result!2, result!5)
    !1!2 = Φ(!1!1, !1!3)
    !2!2 = Φ(!2!1, !2!4)
    !3!2 = Φ(!3!1, !3!4)
    !4!2 = Φ(!4!1, !4!4)
    for j in range(0, SB!0)
Block 5:
    !1!3 = (A!0[i] == B!0[j])
    conditional jump !1!3
Block 6:
    jump
Block 7:
    !2!3 = A!0[i]
    !3!3 = A!0[i]
    !4!3 = [!3!3]
    result!4 = (result!3 + !4!3)
    jump
Block 8:
    jump
Block 9:
    (merge from conditional jump !1!3)
    result!5 = MUX(!1!3, result!4, result!3)
    !2!4 = MUX(!1!3, !2!3, !2!2)
    !3!4 = MUX(!1!3, !3!3, !3!2)
    !4!4 = MUX(!1!3, !4!3, !4!2)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 8, F) (5, 7, T) (6, 1, *) (7, 9, *) (8, 9, *) (9, 4, *)
