template <encrypto::motion::MpcProtocol Protocol>
std::vector<encrypto::motion::SecureUnsignedInteger> psi(
    encrypto::motion::PartyPointer &party,
    std::vector<encrypto::motion::SecureUnsignedInteger> A_0,
    std::uint32_t _MPC_PLAINTEXT_SA_0,
    std::vector<encrypto::motion::SecureUnsignedInteger> B_0,
    std::uint32_t _MPC_PLAINTEXT_SB_0
) {
    // Shared variable declarations
    encrypto::motion::ShareWrapper _1_3;
    std::vector<encrypto::motion::SecureUnsignedInteger> _2_2;
    encrypto::motion::SecureUnsignedInteger SA_0;
    encrypto::motion::SecureUnsignedInteger SB_0;
    encrypto::motion::SecureUnsignedInteger dummy_1;
    encrypto::motion::ShareWrapper flag_2;
    encrypto::motion::ShareWrapper flag_3;
    encrypto::motion::ShareWrapper flag_4;
    encrypto::motion::ShareWrapper flag_5;
    encrypto::motion::SecureUnsignedInteger i_1;
    encrypto::motion::SecureUnsignedInteger j_1;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_1;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_2;
    std::vector<encrypto::motion::SecureUnsignedInteger> result_3;
    encrypto::motion::SecureUnsignedInteger val_2;
    encrypto::motion::SecureUnsignedInteger val_3;
    encrypto::motion::SecureUnsignedInteger val_4;

    // Plaintext variable declarations
    std::uint32_t _MPC_PLAINTEXT_dummy_1;
    bool _MPC_PLAINTEXT_flag_2;
    bool _MPC_PLAINTEXT_flag_4;
    std::uint32_t _MPC_PLAINTEXT_i_1;
    std::uint32_t _MPC_PLAINTEXT_j_1;
    std::vector<std::uint32_t> _MPC_PLAINTEXT_result_1;
    std::uint32_t _MPC_PLAINTEXT_val_2;

    // Constant initializations
    encrypto::motion::SecureUnsignedInteger _MPC_CONSTANT_0 = party->In<Protocol>(encrypto::motion::ToInput(std::uint32_t(0)), 0);
    encrypto::motion::ShareWrapper _MPC_CONSTANT_false = party->In<Protocol>(encrypto::motion::BitVector(1, false), 0);
    encrypto::motion::ShareWrapper _MPC_CONSTANT_true = party->In<Protocol>(encrypto::motion::BitVector(1, true), 0);

    // Plaintext parameter assignments
    SA_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_SA_0), 0);

    SB_0 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_SB_0), 0);

    // Function body
    dummy_1 = _MPC_CONSTANT_0;
    _MPC_PLAINTEXT_dummy_1 = std::uint32_t(0);
    result_1 = {};
    _MPC_PLAINTEXT_result_1 = {};

    // Initialize phi values
    result_2 = result_1;
    for (_MPC_PLAINTEXT_i_1 = std::uint32_t(0); _MPC_PLAINTEXT_i_1 < _MPC_PLAINTEXT_SA_0; _MPC_PLAINTEXT_i_1++) {
        i_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_i_1), 0);
        flag_2 = _MPC_CONSTANT_false;
        _MPC_PLAINTEXT_flag_2 = false;

        // Initialize phi values
        flag_3 = flag_2;
        for (_MPC_PLAINTEXT_j_1 = std::uint32_t(0); _MPC_PLAINTEXT_j_1 < _MPC_PLAINTEXT_SB_0; _MPC_PLAINTEXT_j_1++) {
            j_1 = party->In<Protocol>(encrypto::motion::ToInput(_MPC_PLAINTEXT_j_1), 0);
            _1_3 = (encrypto::motion::ShareWrapper(A_0[_MPC_PLAINTEXT_i_1].Get()) == encrypto::motion::ShareWrapper(B_0[_MPC_PLAINTEXT_j_1].Get()));
            flag_4 = _MPC_CONSTANT_true;
            _MPC_PLAINTEXT_flag_4 = true;
            flag_5 = _1_3.Mux(flag_4.Get(), flag_3.Get());

            // Update phi values
            flag_3 = flag_5;
        }

        val_2 = dummy_1;
        _MPC_PLAINTEXT_val_2 = _MPC_PLAINTEXT_dummy_1;
        val_3 = A_0[_MPC_PLAINTEXT_i_1];
        val_4 = flag_3.Mux(val_3.Get(), val_2.Get());
        _2_2 = {val_4};
        result_3 = (result_2 + _2_2);

        // Update phi values
        result_2 = result_3;
    }


    return result_2;
}
