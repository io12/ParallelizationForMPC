Function biometric_matching_fast(D: plaintext[unsigned int], N: plaintext[unsigned int], C: shared[list[unsigned int]], C_sqr_sum: shared[unsigned int], two_C: shared[list[unsigned int]], S: shared[list[unsigned int]], S_sqr_sum: shared[list[unsigned int]]):
Entry block: 0
Exit block: 6
Block 0:
    differences!1 = []
    jump
Block 1:
    differences!2 = Φ(differences!1, differences!3)
    !1!1 = Φ(!1!0, !1!2)
    !2!1 = Φ(!2!0, !2!2)
    for i: plaintext[int] in range(0, D!0)
Block 2:
    !1!2 = [0]
    !2!2 = (differences!2 + !1!2)
    differences!3 = Update(differences!2, i, !2!2)
    jump
Block 3:
    jump
Block 4:
    differences!4 = Φ(differences!2, differences!5)
    a_sqr_plus_b_sqr!1 = Φ(a_sqr_plus_b_sqr!0, a_sqr_plus_b_sqr!2)
    two_a_b!1 = Φ(two_a_b!0, two_a_b!3)
    tmp!1 = Φ(tmp!0, tmp!2)
    this_diff!1 = Φ(this_diff!0, this_diff!2)
    min_diff!1 = Φ(min_diff!0, min_diff!3)
    min_index!1 = Φ(min_index!0, min_index!3)
    !3!1 = Φ(!3!0, !3!2)
    for i: plaintext[int] in range(0, N!0)
Block 5:
    a_sqr_plus_b_sqr!2 = (S_sqr_sum!0[i] + C_sqr_sum!0)
    two_a_b!2 = 0
    jump
Block 6:
    !4!1 = (min_diff!1, min_index!1)
    return !4!1
Block 7:
    two_a_b!3 = Φ(two_a_b!2, two_a_b!4)
    tmp!2 = Φ(tmp!1, tmp!3)
    for j: plaintext[int] in range(0, D!0)
Block 8:
    tmp!3 = (S!0[((i * D!0) + j)] * two_C!0[j])
    two_a_b!4 = (two_a_b!3 + tmp!3)
    jump
Block 9:
    this_diff!2 = (a_sqr_plus_b_sqr!2 - two_a_b!3)
    differences!5 = Update(differences!4, i, this_diff!2)
    min_diff!2 = differences!5[0]
    min_index!2 = 0
    jump
Block 10:
    min_diff!3 = Φ(min_diff!2, min_diff!5)
    min_index!3 = Φ(min_index!2, min_index!5)
    !3!2 = Φ(!3!1, !3!3)
    for k: plaintext[int] in range(0, N!0)
Block 11:
    !3!3 = (differences!5[k] < min_diff!3)
    conditional jump !3!3
Block 12:
    jump
Block 13:
    min_diff!4 = differences!5[k]
    min_index!4 = k
    jump
Block 14:
    jump
Block 15:
    (merge from conditional jump !3!3)
    min_diff!5 = MUX(!3!3, min_diff!4, min_diff!3)
    min_index!5 = MUX(!3!3, min_index!4, min_index!3)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 1, *) (3, 4, *) (4, 6, F) (4, 5, T) (5, 7, *) (7, 9, F) (7, 8, T) (8, 7, *) (9, 10, *) (10, 12, F) (10, 11, T) (11, 14, F) (11, 13, T) (12, 4, *) (13, 15, *) (14, 15, *) (15, 10, *)
