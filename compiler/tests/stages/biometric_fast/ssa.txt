Function biometric_matching_fast(D: plaintext[int], N: plaintext[int], C: shared[list[int]], C_sqr_sum: shared[int], two_C: shared[list[int]], S: shared[list[int]], S_sqr_sum: shared[list[int]]):
Entry block: 0
Exit block: 6
Block 0:
    differences₁ = []
    jump
Block 1:
    differences₂ = Φ(differences₁, differences₃)
    !1₁ = Φ(!1₀, !1₂)
    !2₁ = Φ(!2₀, !2₂)
    for i: plaintext[int] in range(0, D₀)
Block 2:
    !1₂ = [0]
    !2₂ = (differences₂ + !1₂)
    differences₃ = Update(differences₂, i, !2₂)
    jump
Block 3:
    jump
Block 4:
    differences₄ = Φ(differences₂, differences₅)
    a_sqr_plus_b_sqr₁ = Φ(a_sqr_plus_b_sqr₀, a_sqr_plus_b_sqr₂)
    two_a_b₁ = Φ(two_a_b₀, two_a_b₃)
    tmp₁ = Φ(tmp₀, tmp₂)
    this_diff₁ = Φ(this_diff₀, this_diff₂)
    min_diff₁ = Φ(min_diff₀, min_diff₃)
    min_index₁ = Φ(min_index₀, min_index₃)
    !3₁ = Φ(!3₀, !3₂)
    for i: plaintext[int] in range(0, N₀)
Block 5:
    a_sqr_plus_b_sqr₂ = (S_sqr_sum₀[i] + C_sqr_sum₀)
    two_a_b₂ = 0
    jump
Block 6:
    !4₁ = (min_diff₁, min_index₁)
    return !4₁
Block 7:
    two_a_b₃ = Φ(two_a_b₂, two_a_b₄)
    tmp₂ = Φ(tmp₁, tmp₃)
    for j: plaintext[int] in range(0, D₀)
Block 8:
    tmp₃ = (S₀[((i * D₀) + j)] * two_C₀[j])
    two_a_b₄ = (two_a_b₃ + tmp₃)
    jump
Block 9:
    this_diff₂ = (a_sqr_plus_b_sqr₂ - two_a_b₃)
    differences₅ = Update(differences₄, i, this_diff₂)
    min_diff₂ = differences₅[0]
    min_index₂ = 0
    jump
Block 10:
    min_diff₃ = Φ(min_diff₂, min_diff₅)
    min_index₃ = Φ(min_index₂, min_index₅)
    !3₂ = Φ(!3₁, !3₃)
    for k: plaintext[int] in range(0, N₀)
Block 11:
    !3₃ = (differences₅[k] < min_diff₃)
    conditional jump !3₃
Block 12:
    jump
Block 13:
    min_diff₄ = differences₅[k]
    min_index₄ = k
    jump
Block 14:
    jump
Block 15:
    min_diff₅ = Φ(min_diff₄, min_diff₃)
    min_index₅ = Φ(min_index₄, min_index₃)
    (merge from conditional jump !3₃)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 1, *) (3, 4, *) (4, 6, F) (4, 5, T) (5, 7, *) (7, 9, F) (7, 8, T) (8, 7, *) (9, 10, *) (10, 12, F) (10, 11, T) (11, 14, F) (11, 13, T) (12, 4, *) (13, 15, *) (14, 15, *) (15, 10, *)
