Function(D, N, C, C_sqr_sum, two_C, S, S_sqr_sum):
Entry block: 0
Exit block: 3
Block 0:
    !1 = 0
    !2 = [!1]
    !3 = (!2 * D)
    differences = !3
    jump
Block 1:
    for i in range(0, N)
Block 2:
    !4 = S_sqr_sum[i]
    !5 = (!4 + C_sqr_sum)
    a_sqr_plus_b_sqr = !5
    !6 = 0
    two_a_b = !6
    jump
Block 3:
    !17 = (min_diff, min_index)
    return !17
Block 4:
    for j in range(0, D)
Block 5:
    !7 = S[((i * D) + j)]
    !8 = two_C[j]
    !9 = (!7 * !8)
    tmp = !9
    !10 = (two_a_b + tmp)
    two_a_b = !10
    jump
Block 6:
    !11 = (a_sqr_plus_b_sqr - two_a_b)
    this_diff = !11
    differences[i] = this_diff
    !12 = differences[0]
    min_diff = !12
    !13 = 0
    min_index = !13
    jump
Block 7:
    for k in range(0, N)
Block 8:
    !14 = differences[k]
    !15 = (!14 < min_diff)
    conditional jump !15
Block 9:
    jump
Block 10:
    !16 = differences[k]
    min_diff = !16
    min_index = k
    jump
Block 11:
    jump
Block 12:
    (merge from conditional jump !15)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 4, *) (6, 7, *) (7, 9, F) (7, 8, T) (8, 11, F) (8, 10, T) (9, 1, *) (10, 12, *) (11, 12, *) (12, 7, *)
