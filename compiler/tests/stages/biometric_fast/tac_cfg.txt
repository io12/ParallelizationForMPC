Function(D, N, C, C_sqr_sum, two_C, S, S_sqr_sum):
Entry block: 0
Exit block: 3
Block 0:
    !1 = [0]
    differences = (!1 * D)
    jump
Block 1:
    for i in range(0, N)
Block 2:
    !2 = S_sqr_sum[i]
    a_sqr_plus_b_sqr = (!2 + C_sqr_sum)
    two_a_b = 0
    jump
Block 3:
    !7 = (min_diff, min_index)
    return !7
Block 4:
    for j in range(0, D)
Block 5:
    !3 = S[((i * D) + j)]
    !4 = two_C[j]
    tmp = (!3 * !4)
    two_a_b = (two_a_b + tmp)
    jump
Block 6:
    this_diff = (a_sqr_plus_b_sqr - two_a_b)
    differences[i] = this_diff
    min_diff = differences[0]
    min_index = 0
    jump
Block 7:
    for k in range(0, N)
Block 8:
    !5 = differences[k]
    !6 = (!5 < min_diff)
    conditional jump !6
Block 9:
    jump
Block 10:
    min_diff = differences[k]
    min_index = k
    jump
Block 11:
    jump
Block 12:
    (merge from conditional jump !6)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 4, *) (6, 7, *) (7, 9, F) (7, 8, T) (8, 11, F) (8, 10, T) (9, 1, *) (10, 12, *) (11, 12, *) (12, 7, *)
