Function(D, N, C, C_sqr_sum, two_C, S, S_sqr_sum):
Entry block: 0
Exit block: 2
Block 0:
    !1 = 0
    !2 = [!1]
    !3 = !2 * D
    differences = !3
    i = 0
    !4 = N
    jump
Block 1:
    !5 = i < !4
    conditional jump !5
Block 2:
    !29 = [min_diff, min_index]
    return !29
Block 3:
    !6 = S_sqr_sum[i]
    !7 = !6 + C_sqr_sum
    a_sqr_plus_b_sqr = !7
    !8 = 0
    two_a_b = !8
    j = 0
    !9 = D
    jump
Block 4:
    !10 = j < !9
    conditional jump !10
Block 5:
    !18 = a_sqr_plus_b_sqr - two_a_b
    this_diff = !18
    differences[i] = this_diff
    !19 = 0
    !20 = differences[!19]
    min_diff = !20
    !21 = 0
    min_index = !21
    k = 0
    !22 = N
    jump
Block 6:
    !11 = i * D
    !12 = !11 + j
    !13 = S[!12]
    !14 = two_C[j]
    !15 = !13 * !14
    tmp = !15
    !16 = two_a_b + tmp
    two_a_b = !16
    !17 = 1
    j = j + !17
    jump
Block 7:
    !23 = k < !22
    conditional jump !23
Block 8:
    !28 = 1
    i = i + !28
    jump
Block 9:
    !24 = differences[k]
    !25 = !24 < min_diff
    conditional jump !25
Block 10:
    jump
Block 11:
    !26 = differences[k]
    min_diff = !26
    min_index = k
    jump
Block 12:
    !27 = 1
    k = k + !27
    jump
Edges: (0, 1, BranchKind.UNCONDITIONAL) (1, 2, BranchKind.FALSE) (1, 3, BranchKind.TRUE) (3, 4, BranchKind.UNCONDITIONAL) (4, 5, BranchKind.FALSE) (4, 6, BranchKind.TRUE) (5, 7, BranchKind.UNCONDITIONAL) (6, 4, BranchKind.UNCONDITIONAL) (7, 8, BranchKind.FALSE) (7, 9, BranchKind.TRUE) (8, 1, BranchKind.UNCONDITIONAL) (9, 10, BranchKind.FALSE) (9, 11, BranchKind.TRUE) (10, 12, BranchKind.UNCONDITIONAL) (11, 12, BranchKind.UNCONDITIONAL) (12, 7, BranchKind.UNCONDITIONAL)
