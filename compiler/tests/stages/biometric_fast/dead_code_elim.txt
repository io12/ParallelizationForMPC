Function biometric_matching_fast(D: plaintext, N: plaintext, C: shared, C_sqr_sum: shared, two_C: shared, S: shared, S_sqr_sum: shared):
Entry block: 0
Exit block: 3
Block 0:
    !1!1 = [0]
    differences!1 = (!1!1 * D)
    jump
Block 1:
    differences!2 = Φ(differences!1, differences!3)
    min_diff!1 = Φ(min_diff!0, min_diff!3)
    min_index!1 = Φ(min_index!0, min_index!3)
    for i in range(0, N)
Block 2:
    a_sqr_plus_b_sqr!2 = (S_sqr_sum[i] + C_sqr_sum)
    two_a_b!2 = 0
    jump
Block 3:
    !3!1 = (min_diff!1, min_index!1)
    return !3!1
Block 4:
    two_a_b!3 = Φ(two_a_b!2, two_a_b!4)
    for j in range(0, D)
Block 5:
    tmp!3 = (S[((i * D) + j)] * two_C[j])
    two_a_b!4 = (two_a_b!3 + tmp!3)
    jump
Block 6:
    this_diff!2 = (a_sqr_plus_b_sqr!2 - two_a_b!3)
    differences!3 = Update(differences!2, i, this_diff!2)
    min_diff!2 = differences!3[0]
    min_index!2 = 0
    jump
Block 7:
    min_diff!3 = Φ(min_diff!2, min_diff!5)
    min_index!3 = Φ(min_index!2, min_index!5)
    for k in range(0, N)
Block 8:
    !2!3 = (differences!3[k] < min_diff!3)
    conditional jump !2!3
Block 9:
    jump
Block 10:
    min_diff!4 = differences!3[k]
    min_index!4 = k
    jump
Block 11:
    jump
Block 12:
    (merge from conditional jump !2!3)
    min_diff!5 = MUX(!2!3, min_diff!4, min_diff!3)
    min_index!5 = MUX(!2!3, min_index!4, min_index!3)
    jump
Edges: (0, 1, *) (1, 3, F) (1, 2, T) (2, 4, *) (4, 6, F) (4, 5, T) (5, 4, *) (6, 7, *) (7, 9, F) (7, 8, T) (8, 11, F) (8, 10, T) (9, 1, *) (10, 12, *) (11, 12, *) (12, 7, *)
