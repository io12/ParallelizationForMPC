#pragma once

#include <algorithm>
#include <cassert>
#include <functional>
#include <vector>

#include "base/party.h"
#include "secure_type/secure_unsigned_integer.h"

/**
 * Reshapes @p arr to the shape provided by @p dim_sizes.  @p access_pattern provides
 *   the mapping between the original and the reshaped array.
 *
 * @param arr             The array to reshape.
 * @param access_pattern  Mapping of an index in the output array (broken down
 *                          by dimension) to an index in the input array.
 * @param dim_sizes       The size of each dimension in the output array.
 *
 * @returns The reshaped array.
 */
template <typename T>
std::vector<T>
raise_dim(const std::vector<T> &arr,
          const std::function<std::size_t(const std::vector<std::size_t> &)> &access_pattern,
          const std::vector<std::size_t> &dim_sizes)
{
    std::size_t raised_size =
        std::accumulate(dim_sizes.begin(), dim_sizes.end(), 1, std::multiplies<std::size_t>());

    std::vector<T> raised(raised_size);
    for (std::size_t i = 0; i < raised_size; ++i) {
        // Extract the per-dimension index of the current element.
        std::vector<std::size_t> dim_idxs(dim_sizes.size());
        std::size_t j = i;
        for (std::size_t k = 0; k < dim_idxs.size(); ++k) {
            dim_idxs[k] = j % dim_sizes[k];
            j /= dim_sizes[k];
        }

        raised[i] = arr[access_pattern(dim_idxs)];
    }

    return raised;
}

/**
 * Drops the last dimension from @p arr, retaining the last element of each
 *   slice of that dimension.
 *
 * @param arr        The array to drop the last dimension from.
 * @param dim_sizes  The size of each dimension in @p arr.
 *
 * @returns A copy of @p arr with the last dimension dropped.
 */
template <typename T>
std::vector<T> drop_dim(const std::vector<T> &arr, const std::vector<std::size_t> &dim_sizes)
{
    std::vector<T> dropped(arr.size() / dim_sizes.back());

    for (std::size_t i = 0; i < dropped.size(); ++i) {
        std::size_t j = i;
        for (std::size_t k = 0; k < dim_sizes.size() - 1; ++k) {
            j *= dim_sizes[k];
        }
        j += dim_sizes.back() - 1;
        dropped[i] = arr[j];
    }

    return dropped;
}

// clang-format off
{{circuit_generator}}
// clang-format on

// vim: set ft=cpp :
